fct_rev = FALSE,
fill = palette_light()[[3]],
color = "white",
scale = "free"){
data_factored <- data %>%
mutate_if(is.character, as.factor) %>%
mutate_if(is.factor, as.numeric) %>%
gather(key = key, value = value, factor_key = TRUE)
if(fct_reorder) {
data_factored <- data_factored %>%
mutate(key = as.character(key) %>% as.factor())
}
if(fct_rev) {
data_factored <- data_factored %>%
mutate(key = fct_rev(key))
}
g <- data_factored %>%
ggplot(aes(x = value, group = key)) +
geom_histogram(bins = bins, fill = fill, color = color) +
facet_wrap(~ key, ncol = ncol, scale = scale) +
theme_tq() +
labs(title = "Modeling Concrete Compressive Strength",
subtitle = "Drivers")
return(g)
}
train_raw_tbl %>%
relocate(Compressive_Strength_MPa) %>%
plot_hist_facet(bins = 10, ncol = 3)
train_raw_tbl
recipe_obj <- recipe(Compressive_Strength_MPa ~ ., data = train_raw_tbl) %>%
step_zv(all_predictors())
recipe_obj
prep_train_raw_tbl <- recipe_obj %>%
prep() %>%
bake(new_data = train_raw_tbl) %>%
select(where(is.numeric)) %>%
plot_hist_facet(bins = 10, ncol = 3)
recipe_obj %>%
prep() %>%
bake(new_data = train_raw_tbl) %>%
select(where(is.numeric)) %>%
plot_hist_facet(bins = 10, ncol = 3)
skewed_feature_names <- train_raw_tbl %>%
select_if(is.numeric) %>%
map_df(skewness) %>%
gather(factor_key = T) %>%
arrange(desc(value)) %>%
filter(value >= 0.8) %>%
# filter(!key %in% c("Age", "Superplasticizer")) %>%
pull(key) %>%
as.character()
skewed_feature_names
train_raw_tbl %>%
select(skewed_feature_names) %>%
plot_hist_facet()
train_raw_tbl %>%
select(all_of(skewed_feature_names)) %>%
plot_hist_facet()
recipe_obj <- recipe(Compressive_Strength_MPa ~ ., data = train_raw_tbl) %>%
step_zv(all_predictors()) %>%
step_YeoJohnson(skewed_feature_names) %>%
# step_mutate_at(factor_names, fn = as.factor)
step_center(all_numeric()) %>%
step_scale(all_numeric())
prepared_recipe <- recipe_obj %>%
prep()
recipe_obj
#Before prep()
recipe_obj$steps[[4]]
# After prep()
prepared_recipe$steps[[4]]
prepared_recipe %>%
bake(new_data = train_raw_tbl) %>%
select_if(is.numeric) %>%
plot_hist_facet()
recipe_obj <- recipe(Compressive_Strength_MPa ~ ., data = train_raw_tbl) %>%
step_zv(all_predictors()) %>%
step_YeoJohnson(skewed_feature_names) %>%
# step_mutate_at(factor_names, fn = as.factor)
step_center(all_numeric()) %>%
step_scale(all_numeric()) %>%
prep()
recipe_obj
train_tbl_bake <- bake(recipe_obj, train_data)
train_tbl_bake %>% glimpse()
test_tbl_bake <- bake(recipe_obj, test_data)
data <- train_tbl_bake
glimpse(train_tbl_bake)
# Quoting an expression outside of a function you use quo().  Inside a function use enquo()
feature_expr <- quo(Compressive_Strength_MPa)
get_cor = function(data,
target,
use = "pairwise.complete.obs",
fct_reorder = FALSE,
fct_rev = FALSE) {
feature_expr <- enquo(target)
feature_name <- quo_name(feature_expr)  # takes quoted expression and converts into text
data_cor <- data %>%
mutate_if(is.character, as_factor) %>%
mutate_if(is.factor, as.numeric) %>%
cor(use = use) %>%
as_tibble() %>%
mutate(feature = names(.)) %>% # the dot (.) passes the data frame into the expression
select(feature, !! feature_expr) %>%
filter(!(feature == feature_name)) %>%
mutate_if(is.character, as_factor)
# Adjust levels by the magnitude of the feature_expr correlation coefficient - Attrition
if(fct_reorder) {
data_cor <- data_cor %>%
mutate(feature = fct_reorder(feature, !! feature_expr)) %>%
arrange(feature)
}
if(fct_rev) {
data_cor <- data_cor %>%
mutate(feature = fct_rev(feature)) %>%
arrange(feature)
}
return(data_cor)
}
train_tbl_bake %>%
get_cor(Compressive_Strength_MPa,
use = "pairwise.complete.obs",
fct_reorder = T,
fct_rev = T)
data <- train_tbl_bake
glimpse(train_tbl_bake)
feature_expr <- quo(Compressive_Strength)
plot_cor <- function (data,
target,
fct_reorder = FALSE,
fct_rev = FALSE,
include_lbl = TRUE,
lbl_precision = 2,
lbl_position = "outward",
size = 2,
line_size = 1,
vert_size = 1,
color_pos = palette_light()[[1]],
color_neg = palette_light()[[2]]
) {
feature_expr <- enquo(target)
feature_name <- quo_name(feature_expr)  # takes quoted expression and converts into text
data_cor <- data %>%
get_cor(!! feature_expr, fct_reorder = fct_reorder, fct_rev = fct_rev) %>%
mutate(feature_name_text = round(!! feature_expr, lbl_precision)) %>%
mutate(Correlation = case_when(
!! feature_expr >= 0 ~ "Positive",
TRUE ~ "Negative") %>% as_factor())
g <- data_cor %>%
ggplot(aes_string(x = feature_name, y = "feature", group = "feature")) +
geom_point(aes(color = Correlation), size = size) +
geom_segment(aes(xend = 0, yend = feature, color = Correlation), size = line_size) +
geom_vline(xintercept = 0, color = palette_light()[[1]], size = vert_size) +
expand_limits(x = c(-1, 1)) +
theme_tq() +
scale_color_manual(values = c(color_neg, color_pos))
if(include_lbl) g <- g + geom_label(aes(label = feature_name_text), hjust = lbl_position)
return(g)
}
plot_cor <- function (data,
target,
fct_reorder = FALSE,
fct_rev = FALSE,
include_lbl = TRUE,
lbl_precision = 2,
lbl_position = "outward",
size = 2,
line_size = 1,
vert_size = 1,
color_pos = palette_light()[[1]],
color_neg = palette_light()[[2]]
) {
feature_expr <- enquo(target)
feature_name <- quo_name(feature_expr)  # takes quoted expression and converts into text
data_cor <- data %>%
get_cor(!! feature_expr, fct_reorder = fct_reorder, fct_rev = fct_rev) %>%
mutate(feature_name_text = round(!! feature_expr, lbl_precision)) %>%
mutate(Correlation = case_when(
!! feature_expr >= 0 ~ "Positive",
TRUE ~ "Negative") %>% as_factor())
g <- data_cor %>%
ggplot(aes_string(x = feature_name, y = "feature", group = "feature")) +
geom_point(aes(color = Correlation), size = size) +
geom_segment(aes(xend = 0, yend = feature, color = Correlation), size = line_size) +
geom_vline(xintercept = 0, color = palette_light()[[1]], size = vert_size) +
expand_limits(x = c(-1, 1)) +
theme_tq() +
scale_color_manual(values = c(color_neg, color_pos))
if(include_lbl) g <- g + geom_label(aes(label = feature_name_text), hjust = lbl_position)
return(g)
}
train_tbl_bake %>%
plot_cor(Compressive_Strength_MPa, fct_reorder = TRUE, fct_rev = FALSE)
# 1. Setup ----
# Libraries
library(h2o)
library(recipes)
library(readxl)
library(tidyverse)
library(stringr)
library(tidyquant)
library(forcats)
library(cowplot)
library(fs)
library(glue)
h2o.init()
# Load data
path_train <- "00_Data/Concrete_Data.xls"
train_raw_tbl <- read_excel(path_train, sheet = 1)
train_raw_tbl <- read_excel(path_train, sheet = 1)
train_raw_tbl
raw_tbl <- read_excel(path_train, sheet = 1)
# Processing Pipeline
source("00_Scripts/data_processing_pipeline.R")
getwd()
train_indices <- createDataPartition(y = raw_tbl[["Compressive_Strength_MPa"]],
p = 0.7,
list = FALSE)
train_readable_tbl <- process_data_readable(raw_tbl)
train_readable_tbl
readable_tbl <- process_data_readable(raw_tbl)
train_indices <- createDataPartition(y = readable_tbl[["Compressive_Strength_MPa"]],
p = 0.7,
list = FALSE)
train_data <- readable_tbl[train_indices,]
train_data
test_data <- readable_tbl[-train_indices,]
test_data
recipe_obj <- recipe(Compressive_Strength_MPa ~ ., data = train_raw_tbl) %>%
step_zv(all_predictors()) %>%
step_YeoJohnson(skewed_feature_names) %>%
# step_mutate_at(factor_names, fn = as.factor)
step_center(all_numeric()) %>%
step_scale(all_numeric())
train_data_tbl <- readable_tbl[train_indices,]
test_data_tbl <- readable_tbl[-train_indices,]
recipe_obj <- recipe(Compressive_Strength_MPa ~ ., data = train_data_tbl) %>%
step_zv(all_predictors()) %>%
step_YeoJohnson(skewed_feature_names) %>%
# step_mutate_at(factor_names, fn = as.factor)
step_center(all_numeric()) %>%
step_scale(all_numeric())
train_tbl <- bake(recipe_obj, train_data_tbl)
recipe_obj <- recipe(Compressive_Strength_MPa ~ ., data = train_data_tbl) %>%
step_zv(all_predictors()) %>%
step_YeoJohnson(skewed_feature_names) %>%
# step_mutate_at(factor_names, fn = as.factor)
step_center(all_numeric()) %>%
step_scale(all_numeric()) %>%
prep()
train_tbl <- bake(recipe_obj, train_data_tbl)
test_tbl <- bake(recipe_obj, test_data_tbl)
train_tbl %>% glimpse()
h2o.init()
split_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 321)
train_h2o <- split_h2o[[1]]
valid_h2o <- split_h2o[[2]]
test_h2o <- as.h2o(test_tbl)
y <- "Compressive_Strength_MPa"
x <- setdiff(names(train_h2o), y) # Get the difference between two arguments
automl_models_h2o <- h2o.automl(
x = x,
y = y,
training_frame = train_h2o,
validation_frame = valid_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs = 60,
nfolds = 5
)
typeof(automl_models_h2o)
slotNames(automl_models_h2o)
automl_models_h2o@leaderboard
automl_models_h2o@leader
automl_models_h2o@leaderboard %>%
as_tibble() %>%
slice(1:6) %>%
pull(model_id) %>%
h2o.getModel()
extract_model_name_by_position <- function (h2o_leaderboard, n = 1, verbose = TRUE){
model_name <- h2o_leaderboard %>%
as_tibble() %>%
slice(n) %>%
pull(model_id)
if(verbose) message(model_name)
return(model_name)
}
automl_models_h2o@leaderboard %>%
extract_model_name_by_position(3) %>%
h2o.getModel()
# Save Models
for(i in 1:6) {
automl_models_h2o@leaderboard %>%
extract_model_name_by_position(i) %>%
h2o.getModel() %>%
h2o.saveModel(path = "04_Modeling/h2o_models/")
}
# Save Models
for(i in 1:6) {
automl_models_h2o@leaderboard %>%
extract_model_name_by_position(i) %>%
h2o.getModel() %>%
h2o.saveModel(path = "04_Modeling/h2o_models/")
}
h2o.init()
automl_models_h2o@leaderboard %>%
as_tibble() %>%
slice(1:6) %>%
pull(model_id) %>%
h2o.getModel()
extract_model_name_by_position <- function (h2o_leaderboard, n = 1, verbose = TRUE){
model_name <- h2o_leaderboard %>%
as_tibble() %>%
slice(n) %>%
pull(model_id)
if(verbose) message(model_name)
return(model_name)
}
automl_models_h2o@leaderboard %>%
extract_model_name_by_position(3) %>%
h2o.getModel()
automl_models_h2o@leaderboard
# Save Models
for(i in 1:6) {
automl_models_h2o@leaderboard %>%
extract_model_name_by_position(i) %>%
h2o.getModel() %>%
h2o.saveModel(path = "04_Modeling/h2o_models/")
}
automl_models_h2o@leaderboard %>%
extract_model_name_by_position(3) %>%
h2o.getModel()
automl_models_h2o@leaderboard %>%
extract_model_name_by_position(3) %>%
h2o.getModel() %>%
h2o.saveModel(path = "04_Modeling/h2o_models/")
automl_models_h2o@leaderboard %>%
extract_model_name_by_position(3)
automl_models_h2o@leaderboard %>%
extract_model_name_by_position(3) %>%
h2o.getModel()
automl_models_h2o@leaderboard %>%
extract_model_name_by_position(3) %>%
h2o.getModel() %>%
h2o.saveModel(path = "04_Modeling/h2o_models/")
automl_models_h2o@leaderboard
automl_models_h2o@leaderboard %>%
extract_model_name_by_position(3) %>%
h2o.getModel()
automl_models_h2o@leaderboard %>%
extract_model_name_by_position(3) %>%
h2o.getModel() %>%
h2o.saveModel(path = "04_Modeling/h2o_models/")
# 1. Setup ----
# Libraries
library(h2o)
library(recipes)
library(readxl)
library(tidyverse)
library(stringr)
library(tidyquant)
library(forcats)
library(cowplot)
library(fs)
library(glue)
h2o.init()
automl_models_h2o@leaderboard %>%
extract_model_name_by_position(3) %>%
h2o.getModel()
automl_models_h2o@leaderboard %>%
extract_model_name_by_position(3) %>%
h2o.getModel() %>%
h2o.saveModel(path = "04_Modeling/h2o_models/")
getwd()
# Load data
path_train <- "00_Data/Concrete_Data.xls"
raw_tbl <- read_excel(path_train, sheet = 1)
# Processing Pipeline
source("00_Scripts/data_processing_pipeline.R")
readable_tbl <- process_data_readable(raw_tbl)
train_indices <- createDataPartition(y = readable_tbl[["Compressive_Strength_MPa"]],
p = 0.7,
list = FALSE)
library(recipes)
library(recipes)
h2o.init()
# Load data
path_train <- "00_Data/Concrete_Data.xls"
raw_tbl <- read_excel(path_train, sheet = 1)
# Processing Pipeline
source("00_Scripts/data_processing_pipeline.R")
readable_tbl <- process_data_readable(raw_tbl)
train_indices <- createDataPartition(y = readable_tbl[["Compressive_Strength_MPa"]],
p = 0.7,
list = FALSE)
library(caret)
train_indices <- createDataPartition(y = readable_tbl[["Compressive_Strength_MPa"]],
p = 0.7,
list = FALSE)
test_data_tbl <- readable_tbl[-train_indices,]
recipe_obj <- recipe(Compressive_Strength_MPa ~ ., data = train_data_tbl) %>%
step_zv(all_predictors()) %>%
step_YeoJohnson(skewed_feature_names) %>%
# step_mutate_at(factor_names, fn = as.factor)
step_center(all_numeric()) %>%
step_scale(all_numeric()) %>%
prep()
train_data_tbl <- readable_tbl[train_indices,]
test_data_tbl <- readable_tbl[-train_indices,]
train_indices <- createDataPartition(y = readable_tbl[["Compressive_Strength_MPa"]],
p = 0.7,
list = FALSE)
train_data_tbl <- readable_tbl[train_indices,]
test_data_tbl <- readable_tbl[-train_indices,]
recipe_obj <- recipe(Compressive_Strength_MPa ~ ., data = train_data_tbl) %>%
step_zv(all_predictors()) %>%
step_YeoJohnson(skewed_feature_names) %>%
# step_mutate_at(factor_names, fn = as.factor)
step_center(all_numeric()) %>%
step_scale(all_numeric()) %>%
prep()
# ML Preprocessing
skewed_feature_names <- train_raw_tbl %>%
select_if(is.numeric) %>%
map_df(skewness) %>%
gather(factor_key = T) %>%
arrange(desc(value)) %>%
filter(value >= 0.8) %>%
# filter(!key %in% c("Age", "Superplasticizer")) %>%
pull(key) %>%
as.character()
# ML Preprocessing
skewed_feature_names <- train_data_tbl %>%
select_if(is.numeric) %>%
map_df(skewness) %>%
gather(factor_key = T) %>%
arrange(desc(value)) %>%
filter(value >= 0.8) %>%
# filter(!key %in% c("Age", "Superplasticizer")) %>%
pull(key) %>%
as.character()
recipe_obj <- recipe(Compressive_Strength_MPa ~ ., data = train_data_tbl) %>%
step_zv(all_predictors()) %>%
step_YeoJohnson(skewed_feature_names) %>%
# step_mutate_at(factor_names, fn = as.factor)
step_center(all_numeric()) %>%
step_scale(all_numeric()) %>%
prep()
recipe_obj <- recipe(Compressive_Strength_MPa ~ ., data = train_data_tbl) %>%
step_zv(all_predictors()) %>%
step_YeoJohnson(all_of(skewed_feature_names)) %>%
# step_mutate_at(factor_names, fn = as.factor)
step_center(all_numeric()) %>%
step_scale(all_numeric()) %>%
prep()
train_tbl <- bake(recipe_obj, train_data_tbl)
test_tbl <- bake(recipe_obj, test_data_tbl)
train_tbl %>% glimpse()
h2o.init()
split_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 321)
train_h2o <- split_h2o[[1]]
valid_h2o <- split_h2o[[2]]
test_h2o <- as.h2o(test_tbl)
y <- "Compressive_Strength_MPa"
x <- setdiff(names(train_h2o), y) # Get the difference between two arguments
automl_models_h2o <- h2o.automl(
x = x,
y = y,
training_frame = train_h2o,
validation_frame = valid_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs = 60,
nfolds = 5
)
typeof(automl_models_h2o)
slotNames(automl_models_h2o)
automl_models_h2o@leaderboard
automl_models_h2o@leader
automl_models_h2o@leaderboard %>%
as_tibble() %>%
slice(1:6) %>%
pull(model_id) %>%
h2o.getModel()
extract_model_name_by_position <- function (h2o_leaderboard, n = 1, verbose = TRUE){
model_name <- h2o_leaderboard %>%
as_tibble() %>%
slice(n) %>%
pull(model_id)
if(verbose) message(model_name)
return(model_name)
}
automl_models_h2o@leaderboard %>%
extract_model_name_by_position(3) %>%
h2o.getModel()
# Save Models
for(i in 1:6) {
automl_models_h2o@leaderboard %>%
extract_model_name_by_position(i) %>%
h2o.getModel() %>%
h2o.saveModel(path = "04_Modeling/h2o_models/")
}
automl_models_h2o@leaderboard %>%
extract_model_name_by_position(9) %>%
h2o.getModel()
extract_model_name_by_position(9)
automl_models_h2o@leaderboard %>%
extract_model_name_by_position(9)
getwd()
automl_models_h2o@leaderboard %>%
extract_model_name_by_position(9) %>%
h2o.getModel() %>%
h2o.saveModel(path = "04_Modeling/h2o_models/")
save.image("~/Documents/github/Concrete/concrete_env.RData")
