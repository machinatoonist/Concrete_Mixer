y = "Feature",
x = "Compressive Strength MPa"
)
train_tbl_bake %>%
plot_cor(Compressive_Strength_MPa, fct_reorder = TRUE, fct_rev = FALSE) +
scales::
labs(
title = "Correlation plot for concrete dataset",
subtitle = "UCI Machine Learning Repository",
y = "Feature",
x = "Compressive Strength MPa"
)
train_tbl_bake %>%
plot_cor(Compressive_Strength_MPa, fct_reorder = TRUE, fct_rev = FALSE) +
labs(
title = "Correlation plot for concrete dataset",
subtitle = "UCI Machine Learning Repository",
y = "Feature",
x = "Compressive Strength MPa"
)
plot_cor <- function (data,
target,
fct_reorder = FALSE,
fct_rev = FALSE,
include_lbl = TRUE,
lbl_precision = 2,
lbl_position = "outward",
size = 2,
line_size = 1,
vert_size = 1,
color_pos = palette_light()[[1]],
color_neg = palette_light()[[2]]
) {
feature_expr <- enquo(target)
feature_name <- quo_name(feature_expr)  # takes quoted expression and converts into text
data_cor <- data %>%
get_cor(!! feature_expr, fct_reorder = fct_reorder, fct_rev = fct_rev) %>%
mutate(feature_name_text = round(!! feature_expr, lbl_precision)) %>%
mutate(Correlation = case_when(
!! feature_expr >= 0 ~ "Positive",
TRUE ~ "Negative") %>% as_factor())
g <- data_cor %>%
ggplot(aes_string(x = feature_name, y = "feature", group = "feature")) +
geom_point(aes(color = Correlation), size = size) +
geom_segment(aes(xend = 0, yend = feature, color = Correlation), size = line_size) +
geom_vline(xintercept = 0, color = palette_light()[[1]], size = vert_size) +
# expand_limits(x = c(-1, 1)) +
theme_tq() +
scale_color_manual(values = c(color_neg, color_pos))
if(include_lbl) g <- g + geom_label(aes(label = feature_name_text), hjust = lbl_position)
return(g)
}
train_tbl_bake %>%
plot_cor(Compressive_Strength_MPa, fct_reorder = TRUE, fct_rev = FALSE) +
labs(
title = "Correlation plot for concrete dataset",
subtitle = "UCI Machine Learning Repository",
y = "Feature",
x = "Compressive Strength MPa"
)
plot_cor <- function (data,
target,
fct_reorder = FALSE,
fct_rev = FALSE,
include_lbl = TRUE,
lbl_precision = 2,
lbl_position = "outward",
size = 2,
line_size = 1,
vert_size = 1,
color_pos = palette_light()[[1]],
color_neg = palette_light()[[2]]
) {
feature_expr <- enquo(target)
feature_name <- quo_name(feature_expr)  # takes quoted expression and converts into text
data_cor <- data %>%
get_cor(!! feature_expr, fct_reorder = fct_reorder, fct_rev = fct_rev) %>%
mutate(feature_name_text = round(!! feature_expr, lbl_precision)) %>%
mutate(Correlation = case_when(
!! feature_expr >= 0 ~ "Positive",
TRUE ~ "Negative") %>% as_factor())
g <- data_cor %>%
ggplot(aes_string(x = feature_name, y = "feature", group = "feature")) +
geom_point(aes(color = Correlation), size = size) +
geom_segment(aes(xend = 0, yend = feature, color = Correlation), size = line_size) +
geom_vline(xintercept = 0, color = palette_light()[[1]], size = vert_size) +
expand_limits(x = c(-0.7, 0.7)) +
theme_tq() +
scale_color_manual(values = c(color_neg, color_pos))
if(include_lbl) g <- g + geom_label(aes(label = feature_name_text), hjust = lbl_position)
return(g)
}
train_tbl_bake %>%
plot_cor(Compressive_Strength_MPa, fct_reorder = TRUE, fct_rev = FALSE) +
labs(
title = "Correlation plot for concrete dataset",
subtitle = "UCI Machine Learning Repository",
y = "Feature",
x = "Compressive Strength MPa"
)
plot_cor <- function (data,
target,
fct_reorder = FALSE,
fct_rev = FALSE,
include_lbl = TRUE,
lbl_precision = 2,
lbl_position = "outward",
size = 2,
line_size = 1,
vert_size = 1,
color_pos = palette_light()[[1]],
color_neg = palette_light()[[2]]
) {
feature_expr <- enquo(target)
feature_name <- quo_name(feature_expr)  # takes quoted expression and converts into text
data_cor <- data %>%
get_cor(!! feature_expr, fct_reorder = fct_reorder, fct_rev = fct_rev) %>%
mutate(feature_name_text = round(!! feature_expr, lbl_precision)) %>%
mutate(Correlation = case_when(
!! feature_expr >= 0 ~ "Positive",
TRUE ~ "Negative") %>% as_factor())
g <- data_cor %>%
ggplot(aes_string(x = feature_name, y = "feature", group = "feature")) +
geom_point(aes(color = Correlation), size = size) +
geom_segment(aes(xend = 0, yend = feature, color = Correlation), size = line_size) +
geom_vline(xintercept = 0, color = palette_light()[[1]], size = vert_size) +
expand_limits(x = c(-0.5, 0.5)) +
theme_tq() +
scale_color_manual(values = c(color_neg, color_pos))
if(include_lbl) g <- g + geom_label(aes(label = feature_name_text), hjust = lbl_position)
return(g)
}
train_tbl_bake %>%
plot_cor(Compressive_Strength_MPa, fct_reorder = TRUE, fct_rev = FALSE) +
labs(
title = "Correlation plot for concrete dataset",
subtitle = "UCI Machine Learning Repository",
y = "Feature",
x = "Compressive Strength MPa"
)
plot_cor <- function (data,
target,
fct_reorder = FALSE,
fct_rev = FALSE,
include_lbl = TRUE,
lbl_precision = 2,
lbl_position = "outward",
size = 2,
line_size = 1,
vert_size = 1,
color_pos = palette_light()[[1]],
color_neg = palette_light()[[2]]
) {
feature_expr <- enquo(target)
feature_name <- quo_name(feature_expr)  # takes quoted expression and converts into text
data_cor <- data %>%
get_cor(!! feature_expr, fct_reorder = fct_reorder, fct_rev = fct_rev) %>%
mutate(feature_name_text = round(!! feature_expr, lbl_precision)) %>%
mutate(Correlation = case_when(
!! feature_expr >= 0 ~ "Positive",
TRUE ~ "Negative") %>% as_factor())
g <- data_cor %>%
ggplot(aes_string(x = feature_name, y = "feature", group = "feature")) +
geom_point(aes(color = Correlation), size = size) +
geom_segment(aes(xend = 0, yend = feature, color = Correlation), size = line_size) +
geom_vline(xintercept = 0, color = palette_light()[[1]], size = vert_size) +
expand_limits(x = c(-0.6, 0.6)) +
theme_tq() +
scale_color_manual(values = c(color_neg, color_pos))
if(include_lbl) g <- g + geom_label(aes(label = feature_name_text), hjust = lbl_position)
return(g)
}
train_tbl_bake %>%
plot_cor(Compressive_Strength_MPa, fct_reorder = TRUE, fct_rev = FALSE) +
labs(
title = "Correlation plot for concrete dataset",
subtitle = "UCI Machine Learning Repository",
y = "Feature",
x = "Compressive Strength MPa"
)
train_tbl_bake %>%
plot_cor(Compressive_Strength_MPa, fct_reorder = TRUE, fct_rev = FALSE) +
labs(
title = "Correlation Plot for Soncrete Sompressive Strength",
subtitle = "Concrete dataset from UCI Machine Learning Repository",
y = "Feature",
x = "Compressive Strength MPa"
)
train_tbl_bake %>%
plot_cor(Compressive_Strength_MPa, fct_reorder = TRUE, fct_rev = FALSE) +
labs(
title = "Correlation Plot for Concrete Sompressive Strength",
subtitle = "Concrete dataset from UCI Machine Learning Repository",
y = "Feature",
x = "Compressive Strength MPa"
)
train_tbl_bake %>%
plot_cor(Compressive_Strength_MPa, fct_reorder = TRUE, fct_rev = FALSE) +
labs(
title = "Correlation Plot for Concrete Compressive Strength",
subtitle = "Concrete dataset from UCI Machine Learning Repository",
y = "Feature",
x = "Compressive Strength MPa"
)
train_tbl_bake %>%
plot_cor(Compressive_Strength_MPa, fct_reorder = TRUE, fct_rev = FALSE) +
labs(
title = "Correlation Plot for Concrete Compressive Strength",
subtitle = "Data set from UCI Machine Learning Repository",
y = "Feature",
x = "Compressive Strength MPa"
)
train_tbl_bake %>%
plot_cor(Compressive_Strength_MPa, fct_reorder = TRUE, fct_rev = FALSE) +
labs(
title = "Correlation Plot for Concrete Compressive Strength",
subtitle = "Data set from UCI Machine Learning Repository",
y = "Feature",
x = "Correlation with Compressive Strength MPa"
)
train_tbl_bake %>%
plot_cor(Compressive_Strength_MPa, fct_reorder = TRUE, fct_rev = FALSE) +
labs(
title = "Correlation Plot for Concrete Compressive Strength",
subtitle = "Data set from UCI Machine Learning Repository",
y = "Concrete Recipe Variable",
x = "Correlation with Compressive Strength MPa"
)
predictions <- h2o.predict(ensemble_model,  newdata = as.h2o(test_tbl))
predictions_tbl <- predictions %>% as_tibble()
h2o.mae(ensemble_model, train = T, valid = T, xval = T)
data_transformed <- automl_models_h2o@leaderboard %>%
as_tibble() %>%
mutate(model_type = str_split(string = model_id, pattern = "_", simplify = T)[,1]) %>%
slice(1:10) %>%
rownames_to_column() %>%
mutate(model_id = as_factor(model_id) %>% reorder(auc),
model_type = as_factor(model_type)) %>%
pivot_longer(cols = c(auc:mse), names_to = "key", values_to = "value") %>%
mutate(key = as_factor(key),
model_id = paste0(rowname,". ", model_id) %>% as_factor() %>% fct_rev())
data_transformed <- automl_models_h2o@leaderboard %>%
as_tibble() %>%
mutate(model_type = str_split(string = model_id, pattern = "_", simplify = T)[,1]) %>%
slice(1:10) %>%
rownames_to_column() %>%
mutate(model_id = as_factor(model_id) %>% reorder(mae),
model_type = as_factor(model_type)) %>%
pivot_longer(cols = c(auc:mse), names_to = "key", values_to = "value") %>%
mutate(key = as_factor(key),
model_id = paste0(rowname,". ", model_id) %>% as_factor() %>% fct_rev())
automl_models_h2o@leaderboard
data_transformed <- automl_models_h2o@leaderboard %>%
as_tibble() %>%
mutate(model_type = str_split(string = model_id, pattern = "_", simplify = T)[,1]) %>%
slice(1:10) %>%
rownames_to_column() %>%
mutate(model_id = as_factor(model_id) %>% reorder(mae),
model_type = as_factor(model_type)) %>%
pivot_longer(cols = c(mean_residual_deviane:rmsle), names_to = "key", values_to = "value") %>%
mutate(key = as_factor(key),
model_id = paste0(rowname,". ", model_id) %>% as_factor() %>% fct_rev())
data_transformed <- automl_models_h2o@leaderboard %>%
as_tibble() %>%
mutate(model_type = str_split(string = model_id, pattern = "_", simplify = T)[,1]) %>%
slice(1:10) %>%
rownames_to_column() %>%
mutate(model_id = as_factor(model_id) %>% reorder(mae),
model_type = as_factor(model_type)) %>%
pivot_longer(cols = c(mean_residual_deviance:rmsle), names_to = "key", values_to = "value") %>%
mutate(key = as_factor(key),
model_id = paste0(rowname,". ", model_id) %>% as_factor() %>% fct_rev())
data_transformed %>%
ggplot(aes(x = value, y = model_id , color = model_type)) +
geom_point(size = 3) +
geom_label(aes(label = round(value, 2), hjust = "inward")) +
facet_wrap(~ key, scales = "free_x") +
theme_tq() +
scale_color_tq() +
labs(title = "H2O Leaderboard Visualisation",
subtitle = "Ordered by: mae",
y = "Model Position. Model ID",
x = ""
)
data_transformed <- automl_models_h2o@leaderboard %>%
as_tibble() %>%
mutate(model_type = str_split(string = model_id, pattern = "_", simplify = T)[,1]) %>%
slice(1:5) %>%
rownames_to_column() %>%
mutate(model_id = as_factor(model_id) %>% reorder(mae),
model_type = as_factor(model_type)) %>%
pivot_longer(cols = c(mean_residual_deviance:rmsle), names_to = "key", values_to = "value") %>%
mutate(key = as_factor(key),
model_id = paste0(rowname,". ", model_id) %>% as_factor() %>% fct_rev())
data_transformed %>%
ggplot(aes(x = value, y = model_id , color = model_type)) +
geom_point(size = 3) +
geom_label(aes(label = round(value, 2), hjust = "inward")) +
facet_wrap(~ key, scales = "free_x") +
theme_tq() +
scale_color_tq() +
labs(title = "H2O Leaderboard Visualisation",
subtitle = "Ordered by: mae",
y = "Model Position. Model ID",
x = ""
)
# Create object for stepping through model
h2o_leaderboard <- automl_models_h2o@leaderboard
plot_h2o_leaderboard <- function(h2o_leaderboard, order_by = c("auc", "logloss"),
n_max = 20, size = 4, include_lbl = TRUE) {
# Setup inputs
order_by <- tolower(order_by[[1]])
leaderboard_tbl <- h2o_leaderboard %>%
as_tibble() %>%
mutate(model_type = str_split(model_id, "_", simplify = T)[,1]) %>%
rownames_to_column(var = "rowname") %>%
mutate(model_id = paste0(rowname, ". ", as.character(model_id)) %>% as_factor())
# Transformation
if (order_by == "mae") {
data_transformed_tbl <- leaderboard_tbl %>%
slice(1:n_max) %>%
mutate(
model_id   = as_factor(model_id) %>% reorder(mae),
model_type = as_factor(model_type)
) %>%
# gather(key = key, value = value,
#        -c(model_id, model_type, rowname), factor_key = T)
pivot_longer(cols = c(auc:mse), names_to = "key", values_to = "value") %>%
mutate(key = as_factor(key)) %>% arrange(key)
} else if (order_by == "rmse") {
data_transformed_tbl <- leaderboard_tbl %>%
slice(1:n_max) %>%
mutate(
model_id   = as_factor(model_id) %>% reorder(rmse) %>% fct_rev(),
model_type = as_factor(model_type)
) %>%
# gather(key = key, value = value,
#        -c(model_id, model_type, rowname), factor_key = T)
pivot_longer(cols = c(auc:mse), names_to = "key", values_to = "value") %>%
mutate(key = as_factor(key)) %>% arrange(key)
} else {
stop(paste0("order_by = '", order_by, "' is not a permitted option."))
}
# Visualization
g <- data_transformed_tbl %>%
ggplot(aes(value, model_id, color = model_type)) +
geom_point(size = size) +
facet_wrap(~ key, scales = "free_x") +
theme_tq() +
scale_color_tq() +
labs(title = "Leaderboard Metrics",
subtitle = paste0("Ordered by: ", toupper(order_by)),
y = "Model Postion, Model ID", x = "")
if (include_lbl) g <- g + geom_label(aes(label = round(value, 2), hjust = "inward"))
return(g)
}
automl_models_h2o@leaderboard %>%
plot_h2o_leaderboard(order_by = "mae", n_max = 10)
plot_h2o_leaderboard <- function(h2o_leaderboard, order_by = c("mae", "rmse"),
n_max = 20, size = 4, include_lbl = TRUE) {
# Setup inputs
order_by <- tolower(order_by[[1]])
leaderboard_tbl <- h2o_leaderboard %>%
as_tibble() %>%
mutate(model_type = str_split(model_id, "_", simplify = T)[,1]) %>%
rownames_to_column(var = "rowname") %>%
mutate(model_id = paste0(rowname, ". ", as.character(model_id)) %>% as_factor())
# Transformation
if (order_by == "mae") {
data_transformed_tbl <- leaderboard_tbl %>%
slice(1:n_max) %>%
mutate(
model_id   = as_factor(model_id) %>% reorder(mae),
model_type = as_factor(model_type)
) %>%
# gather(key = key, value = value,
#        -c(model_id, model_type, rowname), factor_key = T)
pivot_longer(cols = c(auc:mse), names_to = "key", values_to = "value") %>%
mutate(key = as_factor(key)) %>% arrange(key)
} else if (order_by == "rmse") {
data_transformed_tbl <- leaderboard_tbl %>%
slice(1:n_max) %>%
mutate(
model_id   = as_factor(model_id) %>% reorder(rmse) %>% fct_rev(),
model_type = as_factor(model_type)
) %>%
# gather(key = key, value = value,
#        -c(model_id, model_type, rowname), factor_key = T)
pivot_longer(cols = c(auc:mse), names_to = "key", values_to = "value") %>%
mutate(key = as_factor(key)) %>% arrange(key)
} else {
stop(paste0("order_by = '", order_by, "' is not a permitted option."))
}
# Visualization
g <- data_transformed_tbl %>%
ggplot(aes(value, model_id, color = model_type)) +
geom_point(size = size) +
facet_wrap(~ key, scales = "free_x") +
theme_tq() +
scale_color_tq() +
labs(title = "Leaderboard Metrics",
subtitle = paste0("Ordered by: ", toupper(order_by)),
y = "Model Postion, Model ID", x = "")
if (include_lbl) g <- g + geom_label(aes(label = round(value, 2), hjust = "inward"))
return(g)
}
automl_models_h2o@leaderboard %>%
plot_h2o_leaderboard(order_by = "mae", n_max = 10)
plot_h2o_leaderboard <- function(h2o_leaderboard, order_by = c("mae", "rmse"),
n_max = 20, size = 4, include_lbl = TRUE) {
# Setup inputs
order_by <- tolower(order_by[[1]])
leaderboard_tbl <- h2o_leaderboard %>%
as_tibble() %>%
mutate(model_type = str_split(model_id, "_", simplify = T)[,1]) %>%
rownames_to_column(var = "rowname") %>%
mutate(model_id = paste0(rowname, ". ", as.character(model_id)) %>% as_factor())
# Transformation
if (order_by == "mae") {
data_transformed_tbl <- leaderboard_tbl %>%
slice(1:n_max) %>%
mutate(
model_id   = as_factor(model_id) %>% reorder(mae),
model_type = as_factor(model_type)
) %>%
# gather(key = key, value = value,
#        -c(model_id, model_type, rowname), factor_key = T)
pivot_longer(cols = c(mean_residual_deviance:rmsle), names_to = "key", values_to = "value") %>%
mutate(key = as_factor(key)) %>% arrange(key)
} else if (order_by == "rmse") {
data_transformed_tbl <- leaderboard_tbl %>%
slice(1:n_max) %>%
mutate(
model_id   = as_factor(model_id) %>% reorder(rmse) %>% fct_rev(),
model_type = as_factor(model_type)
) %>%
# gather(key = key, value = value,
#        -c(model_id, model_type, rowname), factor_key = T)
pivot_longer(cols = c(auc:mse), names_to = "key", values_to = "value") %>%
mutate(key = as_factor(key)) %>% arrange(key)
} else {
stop(paste0("order_by = '", order_by, "' is not a permitted option."))
}
# Visualization
g <- data_transformed_tbl %>%
ggplot(aes(value, model_id, color = model_type)) +
geom_point(size = size) +
facet_wrap(~ key, scales = "free_x") +
theme_tq() +
scale_color_tq() +
labs(title = "Leaderboard Metrics",
subtitle = paste0("Ordered by: ", toupper(order_by)),
y = "Model Postion, Model ID", x = "")
if (include_lbl) g <- g + geom_label(aes(label = round(value, 2), hjust = "inward"))
return(g)
}
automl_models_h2o@leaderboard %>%
plot_h2o_leaderboard(order_by = "mae", n_max = 10)
plot_h2o_leaderboard <- function(h2o_leaderboard, order_by = c("mae", "rmse"),
n_max = 20, size = 4, include_lbl = TRUE) {
# Setup inputs
order_by <- tolower(order_by[[1]])
leaderboard_tbl <- h2o_leaderboard %>%
as_tibble() %>%
mutate(model_type = str_split(model_id, "_", simplify = T)[,1]) %>%
rownames_to_column(var = "rowname") %>%
mutate(model_id = paste0(rowname, ". ", as.character(model_id)) %>% as_factor())
# Transformation
if (order_by == "mae") {
data_transformed_tbl <- leaderboard_tbl %>%
slice(1:n_max) %>%
mutate(
model_id   = as_factor(model_id) %>% reorder(mae) %>% fct_rev(),
model_type = as_factor(model_type)
) %>%
# gather(key = key, value = value,
#        -c(model_id, model_type, rowname), factor_key = T)
pivot_longer(cols = c(mean_residual_deviance:rmsle), names_to = "key", values_to = "value") %>%
mutate(key = as_factor(key)) %>% arrange(key)
} else if (order_by == "rmse") {
data_transformed_tbl <- leaderboard_tbl %>%
slice(1:n_max) %>%
mutate(
model_id   = as_factor(model_id) %>% reorder(rmse) %>% fct_rev(),
model_type = as_factor(model_type)
) %>%
# gather(key = key, value = value,
#        -c(model_id, model_type, rowname), factor_key = T)
pivot_longer(cols = c(auc:mse), names_to = "key", values_to = "value") %>%
mutate(key = as_factor(key)) %>% arrange(key)
} else {
stop(paste0("order_by = '", order_by, "' is not a permitted option."))
}
# Visualization
g <- data_transformed_tbl %>%
ggplot(aes(value, model_id, color = model_type)) +
geom_point(size = size) +
facet_wrap(~ key, scales = "free_x") +
theme_tq() +
scale_color_tq() +
labs(title = "Leaderboard Metrics",
subtitle = paste0("Ordered by: ", toupper(order_by)),
y = "Model Postion, Model ID", x = "")
if (include_lbl) g <- g + geom_label(aes(label = round(value, 2), hjust = "inward"))
return(g)
}
automl_models_h2o@leaderboard %>%
plot_h2o_leaderboard(order_by = "mae", n_max = 10)
automl_models_h2o@leaderboard %>%
plot_h2o_leaderboard(order_by = "mae", n_max = 5)
automl_models_h2o@leaderboard %>%
plot_h2o_leaderboard(order_by = "mae", n_max = 8)
